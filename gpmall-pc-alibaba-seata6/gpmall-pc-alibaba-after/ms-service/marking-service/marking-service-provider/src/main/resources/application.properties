# 应用名称
spring.application.name=marking-service-provider
# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=192.168.8.133:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=public
# dubbo 协议
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
# dubbo 协议端口（ -1 表示自增端口，从 20880 开始）
dubbo.protocol.port=-1
# Dubbo 消费端订阅服务端的应用名，多个服务提供者用逗号分隔
# 这里订阅"自己"，会被忽略掉，请根据实际情况添加
dubbo.cloud.subscribed-services=marking-service-provider,user-service-provider
# dubbo 服务扫描基准包
dubbo.scan.base-packages=com.gupaoedu.gpmall.marking.markingserviceprovider


spring.datasource.druid.url=jdbc:mysql://192.168.8.132:3306/gpmall-alibaba?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.druid.username=root
spring.datasource.druid.password=123456
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.initial-size=30
spring.datasource.druid.max-active=100
spring.datasource.druid.min-idle=10
spring.datasource.druid.max-wait=60000
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=300000
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.filters=stat,wall

mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.auto-mapping-behavior=full
mybatis-plus.mapper-locations=classpath*:mapper/**/*.Mapper.xml

spring.redis.port=6379
spring.redis.host=192.168.8.132


async.executor.thread.core-pool-size=6
async.executor.thread.max-pool-size=12
async.executor.thread.queue-capacity=100000
async.executor.thread.name-prefix=lottery-service-


# seata.enabled=true
# seata.application-id=marking-service
# 这个是事务分组，项目的微服务都要配置一样的事务分组，
# 并且要和上文中的seata-server的service.vgroupMapping.seata_test_tx_group=default一致
# seata.tx-service-group=marking-service-seata-group
# 启动自动开启数据源代理
# seata.enable-auto-data-source-proxy=true
#  分组映射，主要作用是根据分组映射来获取Seata Server的服务实例
# seata.service.vgroup-mapping.marking-service-seata-group=default
# TC服务列表，也就是Seata-Server的服务端地址，只有当注册中心是file的时候才使用
# seata.service.grouplist.default=192.168.8.133:8091
# 降级开关，业务端根据连续错误数触发自动降级，不走seata事务
# seata.service.enable-degrade=false
# 是否禁用全局事务
# seata.service.disable-global-transaction=false

#spring.cloud.alibaba.seata.tx-service-group=marking-service-seata-service-group
#spring.cloud.alibaba.seata.application-id=marking-service

# spring.cloud.alibaba.seata.tx-service-group=marking-service-seata-service-group


# 设置分组事务
seata.tx-service-group=my_test_tx_group


seata.config.type=nacos
seata.config.nacos.group=SEATA_GROUP
seata.config.nacos.username=nacos
seata.config.nacos.password=nacos
seata.config.nacos.server-addr=192.168.8.133:8848

seata.registry.type=nacos
seata.registry.nacos.cluster=default
seata.registry.nacos.application=seata-server
seata.registry.nacos.group=SEATA_GROUP
seata.registry.nacos.username=nacos
seata.registry.nacos.password=nacos
seata.registry.nacos.server-addr=192.168.8.133:8848